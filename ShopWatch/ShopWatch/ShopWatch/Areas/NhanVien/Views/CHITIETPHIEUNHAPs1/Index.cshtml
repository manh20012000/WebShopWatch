@model IEnumerable<ShopWatch.Models.CHITIETPHIEUNHAP>

@{
    ViewBag.Title = "Index";
    Layout = "~/Areas/NhanVien/Views/Shared/_Layout1.cshtml";
}
<style>
    .edit-button,
    .delete-button {
        display: inline-block;
        padding: 8px 16px;
        margin-right: 10px;
        background: linear-gradient(to right, #87CEFA, #4682B4);
        border: none;
        color: white;
        font-size: 14px;
        text-align: center;
        text-decoration: none;
        cursor: pointer;
    }

    .bnts {
        background-color: burlywood;
        margin-left: 20px;
    }

    .seache {
        display: flex;
        padding: 20px
    }

    tbody {
        overflow: scroll;
    }

    #table-wrapper {
        position: relative; position: sticky;
        top: 0;
        z-index: 1;
    }

    #table-scroll {
        height: 450px;
        overflow: auto;
        margin-top: 20px;
    }

    #table-wrapper table {
        width: 100%;
    }

        #table-wrapper table thead th .text {
            position: absolute;
            top: -20px;
            z-index: 2;
            height: 20px;
            width: 35%;
            border: 1px solid red;
        }

    #table-scroll {
        overflow-y: auto;
        max-height: 700px; /* Đặt độ cao tối đa của bảng */
    }

    .tablet {
        width: 100%;
        border-collapse: collapse;
    }

        .tablet th, .tablet td {
            padding: 8px;
            border: 1px solid #ddd;
            text-align: left;
        }
</style>
<div class="row">
    <div class="col-xs-12">
        @using (Html.BeginForm("Index", "CHITIETPHIEUNHAPs1", FormMethod.Post))
        {
            @Html.AntiForgeryToken()
            <div class="input-group-container">
                <div class="seache">
                    <input id="myInput" onkeyup="myFunction()" type="text" name="searchValue" class="form-control" placeholder="Nhập vào giá tiền" aria-label="Search" aria-describedby="basic-addon2">
                    <button class="btn btn-outline-secondary bnts" type="submit">Search</button>
                </div>
            </div>
        }
    </div>
</div>
<div class="table-container">
    <div id="table-wrapper">
        <div id="table-scroll">
            <table class="tablet" id="myTable">
                <thead id="table-wrapper">
                    <tr>
                        <th style="padding: 15px; text-align: center;">
                            <label>Tổng tiền</label>
                        </th>
                        <th style="padding: 15px; text-align: center;">
                            @Html.DisplayNameFor(model => model.MATHANG.MAMATHANG)
                        </th>
                        <th style="padding: 15px; text-align: center;">
                            @Html.DisplayNameFor(model => model.NHAPHANG.MANV)
                        </th>
                        <th style="padding: 15px; text-align: center;">
                            @Html.DisplayNameFor(model => model.MATHANG.TENHANG)
                        </th>
                        <th style="padding: 15px; text-align: center;">
                            @Html.DisplayNameFor(model => model.SOLUONG)
                        </th>
                        <th style="padding: 15px; text-align: center;">
                            @String.Format("{0:N0}", @Html.DisplayNameFor(model => model.GIANHAP))
                        </th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td style="color:brown;font-weight:600">@String.Format("{0:N0}", item.GIANHAP * item.SOLUONG)</td>
                            <td>@Html.DisplayFor(modelItem => item.MATHANG.MAMATHANG)</td>
                            <td>@Html.DisplayFor(modelItem => item.NHAPHANG.MANV)</td>
                            <td>@Html.DisplayFor(modelItem => item.MATHANG.TENHANG)</td>
                            <td>@Html.DisplayFor(modelItem => item.SOLUONG)</td>
                            <td>@String.Format("{0:N0}", item.GIANHAP)</td>
                            <td class="text-center">
                                <div class="btn-group" role="group" aria-label="Button group with nested dropdown">
                                    <div class="btn-group" role="group">
                                        <button id="btnGroupDrop1"
                                                type="button" style="color:brown"
                                                class="btn btn-outline-secondary dropdown-toggle"
                                                data-bs-toggle="dropdown"
                                                aria-haspopup="true"
                                                aria-expanded="false">
                                            Tùy chọn
                                        </button>
                                        <div class="dropdown-menu" aria-labelledb0pxy="btnGroupDrop1" style="width:20px">
                                            @Html.ActionLink("DetailReceipt", "DetailReceipt", new { id = item.MACTPHIEUNHAP }, new { @class = "btn btn-primary" })
                                            @Html.ActionLink("Delete", "deleteReceipt", new { id = item.MACTPHIEUNHAP }, new { @class = "delete-button" })
                                        </div>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
<script>
    function myFunction() {
        // Declare variables
        var input, filter, table, tr, td, i, txtValue;
        input = document.getElementById("myInput");
        filter = input.value.toUpperCase();
        table = document.getElementById("myTable");
        tr = table.getElementsByTagName("tr");

        // Loop through all table rows, and hide those who don't match the search query
        for (i = 0; i < tr.length; i++) {
            td = tr[i].getElementsByTagName("td")[0];
            td2 = tr[i].getElementsByTagName("td")[3];
           @* td = tr[i].getElementsByTagName("td")[1];
            td = tr[i].getElementsByTagName("td")[3];*@
            if (td) {
                txtValue = td.textContent || td.innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    tr[i].style.display = "";
                } else {
                    tr[i].style.display = "none";
                }
            } else if (td2) {
                txtValue = td2.textContent || td2.innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    tr[i].style.display = "";
                } else {
                    tr[i].style.display = "none";
                }
            }
        }
    }
    function sortTable() {
        var table, rows, switching, i, x, y, shouldSwitch;
        table = document.getElementById("myTable");
        switching = true;
        /* Make a loop that will continue until
        no switching has been done: */
        while (switching) {
            // Start by saying: no switching is done:
            switching = false;
            rows = table.rows;
            /* Loop through all table rows (except the
            first, which contains table headers): */
            for (i = 1; i < (rows.length - 1); i++) {
                // Start by saying there should be no switching:
                shouldSwitch = false;
                /* Get the two elements you want to compare,
                one from current row and one from the next: */
                x = rows[i].getElementsByTagName("TD")[0];
                y = rows[i + 1].getElementsByTagName("TD")[0];
                // Check if the two rows should switch place:
                if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                    // If so, mark as a switch and break the loop:
                    shouldSwitch = true;
                    break;
                }
            }
            if (shouldSwitch) {
                /* If a switch has been marked, make the switch
                and mark that a switch has been done: */
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
            }
        }
    }
</script>
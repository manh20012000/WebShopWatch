﻿@model ShopWatch.Models.MATHANG

@{
    ViewBag.Title = "Create";
    Layout = "~/Areas/NhanVien/Views/Shared/_Layout1.cshtml";
}
<style>
    .image-container {
        width: 100%;
        overflow-x: auto; /* Cho phép cuộn ngang khi nhiều ảnh */
    }

    .image-row {
        display: flex;
        gap: 10px; /* Khoảng cách giữa các ảnh */
    }

    .imagePreview {
        width: 100px;
        height: 100px;
        object-fit: cover;
    }

    .thumbnail-container {
        position: relative;
        display: inline-block;
        margin: 10px;
    }

    .thumbnail {
        width: 100px; /* Kích thước ảnh */
        height: 100px;
        transition: transform 0.3s; /* Hiệu ứng chuyển động */
    }

        .thumbnail:hover {
            transform: scale(1.1); /* Kích thước lớn hơn khi hover */
            border: 2px solid black; /* Viền đen */
        }

    #saleInfoContainer {
        padding-left: 20%; /* Thụt lùi sang phải 120px */
    }
</style>
@using (Html.BeginForm("CreateMatHang", "MATHANGs", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    if (TempData["ThongBao"] != null)
    {
        <div class="alert alert-success">@TempData["ThongBao"]</div>
    }
    <div class="row g-3">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.MAMATHANG, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.MAMATHANG, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.MAMATHANG, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.TENHANG, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.TENHANG, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.TENHANG, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">

            @Html.LabelFor(model => model.NGAYSANXUAT, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.NGAYSANXUAT, new { type = "date", @class = "form-control" })


                @Html.ValidationMessageFor(model => model.NGAYSANXUAT, "", new { @class = "text-danger" })

            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.TENHANGSANXUAT, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*   @Html.DropDownListFor(model => model.TENHANGSANXUAT, ViewBag.WatchBrands as List<SelectListItem>, "Chọn thương hiệu", new { @class = "form-control" })*@
                @Html.DropDownListFor(model => model.TENHANGSANXUAT, new SelectList(
                   new List<SelectListItem>
                   {
                new SelectListItem { Value = "TAG Heuer", Text = "TAG Heuer" },
                new SelectListItem { Value = "A.Lange & Söhne", Text = "A.Lange & Söhne" },
                new SelectListItem { Value = "Jaeger-LeCoultre", Text = "Jaeger-LeCoultre" },
                new SelectListItem { Value = "Rolex", Text = "Rolex" },
                new SelectListItem { Value = "Hublot", Text = "Hublot" }
                   }, "Value", "Text"), "Chọn thương hiệu",
                   new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.TENHANGSANXUAT, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.GIAHANG, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.GIAHANG, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.GIAHANG, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.KICHTHUOC, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.KICHTHUOC, new { htmlAttributes = new { type = "number", min = "0", @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.KICHTHUOC, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.SALE, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("MASALE", (SelectList)ViewBag.MASALE, "--Mời bạn chọn mã sale --", new { @class = "form-control", onchange = "getSaleInfo(this.value)" })
            </div>
            <br />
            <br />
            <div id="saleInfoContainer">
                <!-- Nội dung HTML của SALE sẽ được cập nhật tại đây -->
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.BAOHANH, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.BAOHANH, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.BAOHANH, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.LOAI, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.LOAI, new SelectList(
                    new List<SelectListItem>
                    {
                    new SelectListItem { Value = "ĐH CƠ", Text = "Đồng hồ cơ" },
                    new SelectListItem { Value = "ĐH ĐIỆN TỬ", Text = "Đồng hồ điện tử" },
                    new SelectListItem { Value = "ĐH SMARTWATCH", Text = "Đồng hồ thông minh" },
                    new SelectListItem { Value = "ĐH THỜI TRANG", Text = "Đồng hồ thời trang cao cấp" },
                    }, "Value", "Text"), "Chọn Loại ",
                    new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.LOAI, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ANHSANPHAM, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <label>Chọn ảnh làm ảnh gốc </label>
                @* @Html.EditorFor(model => model.ANHSANPHAM, new { htmlAttributes = new { type = "file", name = "imageFile", id = "imageFile", @class = "form-control" } })*@
                <input type="file" name="imageFile" id="imageFile" class="form-control" />
                @* @Html.ValidationMessageFor(model => model.ANHSANPHAM, "", new { @class = "text-danger" })*@

                <img id="previewImage" alt="Preview" class="previewImage" style="width:100px;height:100px" />
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.HINHANHs, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <label>Chọn ảnh làm ảnh hiển thị chi tiết </label>
                <input type="file" name="ANHS" id="fileInput" multiple />
                <div id="imageContainer" class="image-container">

                    <div id="imagePreview" class="image-row"></div>
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-5 col-md-10">
                <input type="submit" value="Create Product" class="btn btn-default" style="width: 30%; background: linear-gradient(to right, #FFA500, #FF4500)" />
            </div>
        </div>
    </div>
}
<script>


    document.getElementById('fileInput').addEventListener('change', function (event) {
        var files = event.target.files;
        var imagePreview = document.getElementById('imagePreview');
        imagePreview.innerHTML = "";

        for (var i = 0; i < files.length; i++) {
            var img = document.createElement("img");
            img.src = URL.createObjectURL(files[i]);
            img.className = "imagePreview"; // Thêm class cho ảnh
            imagePreview.appendChild(img);
        }
    });

    function getSaleInfo(saleId) {
        // Gửi yêu cầu AJAX để lấy thông tin SALE
        $.get('/NhanVien/MATHANGs/GetSaleInfor', { saleId: saleId }, function (data) {
            function formatJsonDate(jsonDate) {
                // Chuyển đổi ngày từ dạng "/Date(milliseconds)/" sang đối tượng Date
                var date = new Date(parseInt(jsonDate.substr(6)));

                // Lấy thông tin ngày, tháng, năm
                var day = date.getDate();
                var month = date.getMonth() + 1; // Tháng bắt đầu từ 0
                var year = date.getFullYear();

                // Trả về chuỗi định dạng ngày tháng năm
                return day + '/' + month + '/' + year;
            }
            var ngayBatDau = formatJsonDate(data.NGAYBATDAU);
            var ngayHetHan = formatJsonDate(data.NGAYHETHAN);
            // Cập nhật nội dung HTML với thông tin SALE
            $('#saleInfoContainer').html(`
        <br />
        <label class="sale-label">PHẦN TRĂM SALE: <span class="sale-value">${data.PHANTRAMSALE}%</span></label>
        <br />

        <label class="sale-label">NGÀY BẮT ĐẦU: <span class="sale-value">${ngayBatDau}</span></label>
        <br />
        <label class="sale-label">NGÀY KẾT THÚC: <span class="sale-value">${ngayHetHan}</span></label>
        <br />
        <!-- Thêm các thông tin khác tùy theo mô hình SALE của bạn -->
                `);
        });

    }

</script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
